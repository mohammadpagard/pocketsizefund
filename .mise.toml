[tools]
python = "3.10"
kubectl = "latest"
uv = "latest"
poetry = "latest"
minikube = "latest"
yq = "latest"
jq = "latest"
ruff = "0.4.10" # lastest is breaking
direnv = "latest"
helm = "latest"
go = "latest"

[env]
PLATFORM = "linux/amd64"
PULUMI_STACK = "pocketsizefund/development"
# _.file = "etc/.env.development"

[tasks."repo:setup"]
description = "setup dependencies for the repo"
run = "poetry install --with dev,test"

[tasks."python:dead-code"]
description = "check for dead python code"
tools = ["poetry"]
depends = ["repo:setup"]
run = "poetry run vulture --min-confidence 80 ."

[tasks."python:lint"]
description = "run python linter across the monorepo"
tools = ["ruff"]
run = """
ruff check --output-format=github .
"""

[tasks."python:test"]
description = "unit tests for the pocketsizefund python package"
depends = ["libraries:python:setup"]
run = """
cd $root/libraries/python/tests
poetry run coverage run --parallel-mode --module pytest
poetry run coverage combine
poetry run coverage report --omit='test_*.py,*/__init__.py'
poetry run coverage xml --omit='test_*.py,*/__init__.py'
rm -rf .coverage/
mv coverage.xml $root/
"""

[tasks."rust:lint"]
description = "lint rust cargos"
run = """
cd $root/platform/discord
cargo clippy --all --
"""

[tasks."rust:format"]
description = "format rust cargos"
run = """
cd $root/platform/discord
cargo fmt --all
"""

[tasks."rust:test"]
description = "format rust cargos"
run = """
cd $root/platform/discord
cargo test
"""

[tasks."rust:audit"]
description = "audit rust cargos"
run = """
cd $root/platform/discord
cargo deny check
"""

[tasks."libraries:python:setup"]
description = "setup virtualenv for pocketsizefund python package"
tools = ["poetry"]
run = """
cd $root/libraries/python/pocketsizefund
poetry install 
"""

[tasks."libraries:python:build"]
description = "build the pocketsizefund python package"
depends = ["libraries:python:setup"]
run = """
cd $root/libraries/python/pocketsizefund
poetry build
"""

[tasks."libraries:python:publish"]
description = "publish the pocketsizefund python package to PyPI registry"
depends = ["libraries:python:build"]
run = """
cd $root/libraries/python/pocketsizefund
poetry config pypi-token.pypi $PYPI_TOKEN
poetry publish
"""

[tasks."k8s:config:sync"]
description = "sync cluster config with local kube config"
tools = ["jq", "yq"]
run = """
cd $root/infrastructure
pulumi stack select $PULUMI_STACK
pulumi stack output kubeconfig | jq . | yq eval -P - > $HOME/.kube/config
"""

[tasks."k8s:secrets:sync:development"]
description = "sync cluster secrets with local kube config in deveopment namespace"
tools = ["jq", "yq"]
run = """
cd $root
kubectl delete secrets --all --namespace development
kubectl create secret generic platform --from-env-file=$root/etc/.env.development --namespace development
kubectl describe secrets platform --namespace development
"""

[tasks."k8s:secrets:sync:paper"]
description = "sync cluster secrets with local kube config in paper namespace"
tools = ["jq", "yq"]
run = """
cd $root
kubectl delete secrets --all --namespace paper
kubectl create secret generic platform --from-env-file=$root/etc/.env.paper --namespace paper
kubectl describe secrets platform --namespace paper
"""


[tasks."k8s:secrets:sync:live"]
description = "sync cluster secrets with local kube config in live namespace"
tools = ["jq", "yq"]
run = """
cd $root
kubectl delete secrets --all --namespace live
kubectl create secret generic platform --from-env-file=$root/etc/.env.live --namespace live
kubectl describe secrets platform --namespace live
"""


[tasks."k8s:secrets:sync"]
description = "sync cluster secrets with local kube config in deveopment namespace"
depends = ["k8s:secrets:sync:development", "k8s:secrets:sync:paper", "k8s:secrets:sync:live"]


[tasks."k8s:helm:install"]
description = "install helm charts to k8s cluster"
run = """
helm repo add grafana https://grafana.github.io/helm-charts
helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
"""

[tasks."k8s:helm:grafana:setup"]
description = "setup grafana helm chart"
depends = ["k8s:helm:install"]
run = """
kubectl create namespace monitoring
helm install grafana grafana/grafana --namespace monitoring
"""

[tasks."k8s:grafana:get-password"]
description = "get grafana admin password"
run = """
kubectl get secret --namespace monitoring grafana -o jsonpath="{.data.admin-password}" | base64 --decode ; echo
"""

[tasks."k8s:grafana:launch"]
description = "launch grafana dashboard"
depends = ["k8s:grafana:get-password"]
run = """
export POD_NAME=$(kubectl get pods --namespace monitoring -l "app.kubernetes.io/name=grafana,app.kubernetes.io/instance=grafana" -o jsonpath="{.items[0].metadata.name}")
     kubectl --namespace monitoring port-forward $POD_NAME 3000
"""

[tasks."k8s:helm:prometheus:setup"]
description = "setup prometheus helm chart"
run = """
kubectl create namespace prometheus
helm install prometheus prometheus-community/kube-prometheus-stack -n prometheus
"""

[tasks."k8s:helm:update"]
description = "update helm charts"
run = """
helm repo update
"""

[tasks."platform:price-model:build"]
description = "build docker image for price model"
run = """
cd $root/platform/pricemodel

IMAGE=pocketsizefund/price-model
VERSION=$(poetry version -s)

docker build -t $IMAGE:latest -t $IMAGE:$VERSION --platform $PLATFORM .
"""

[tasks."platform:price-model:run"]
description = "run price model in docker compose"
run = """
cd $root/platform/pricemodel
docker compose up --build
"""

[tasks."platform:price-model:push"]
description = "push price model image to docker hub"
depends = ["price-model:build"]
run = """
cd $root/platform/pricemodel

IMAGE=pocketsizefund/price-model
VERSION=$(poetry version -s)

docker push $IMAGE:latest
docker push $IMAGE:$VERSION
"""

[tasks."platform:position-manager:build"]
description = "build docker image for the position manager"
run = """
cd $root/platform/positionmanager

IMAGE=pocketsizefund/position-manager
VERSION=$(poetry version -s)

docker build -t $IMAGE:latest -t $IMAGE:$VERSION --platform $PLATFORM .
"""

[tasks."platform:position-manager:run"]
description = "run position manager in docker compose"
run = """
cd $root/platform/positionmanager
docker compose up --build
"""

[tasks."platform:position-manager:push"]
description = "push position manager image to docker hub"
depends = ["position-manager:build"]
run = """
cd $root/platform/positionmanager

IMAGE=pocketsizefund/position-manager
VERSION=$(poetry version -s)

docker push $IMAGE:latest
docker push $IMAGE:$VERSION
"""

[tasks."platform:discord:build"]
description = "build docker image for discord bot"
run = """
cd $root/platform/discord

IMAGE=pocketsizefund/discord
VERSION=$(poetry version -s)

docker build -t $IMAGE:latest -t $IMAGE:$VERSION --platform $PLATFORM .
"""

[tasks."platform:discord:run"]
description = "run price model in docker compose"
run = """
cd $root/platform/discord
docker compose up --build
"""

[tasks."platform:discord:push"]
description = "push price model image to docker hub"
depends = ["price-model:build"]
run = """
cd $root/platform/discord

IMAGE=pocketsizefund/price-model
VERSION=$(poetry version -s)

docker push $IMAGE:latest
docker push $IMAGE:$VERSION
"""

[tasks."platform:discord:lint"]
description = "lint rust cargos"
run = """
cd $root/platform/discord
cargo clippy --all --
"""

[tasks."platform:discord:format"]
description = "format rust cargos"
run = """
cd $root/platform/discord
cargo fmt --all
"""

[tasks."platform:discord:test"]
description = "format rust cargos"
run = """
cd $root/platform/discord
cargo test
"""

[tasks."platform:discord:audit"]
description = "audit rust cargos"
run = """
cd $root/platform/discord
cargo deny check
"""

[tasks."test:all"]
description = "run all tasks"
depends = ["check:*", "lint:*", "audit:*", "test:*"]



[tasks."infrastructure:core:build"]
description = "build docker image for infrastructure"
run = """
cd $root/infrastructure
IMAGE=pocketsizefund/infrastructure
VERSION=$(poetry version -s)
docker build --build-arg PULUMI_ACCESS_TOKEN=$PULUMI_ACCESS_TOKEN -t $IMAGE:latest -t $IMAGE:$VERSION --platform $PLATFORM .
"""


[tasks."infrastructure:core:push"]
description = "push infrastructure image to docker hub"
depends = ["infrastructure:core:build"]
run = """
cd $root/infrastructure

IMAGE=pocketsizefund/infrastructure

docker push $IMAGE:latest
"""


[tasks."infrastructure:core:launch"]
description = "launch infrastructure"
run = """
cd $root/infrastructure

docker run --rm -it \
  --platform $PLATFORM \
  --env PULUMI_ACCESS_TOKEN \
  pocketsizefund/infrastructure pulumi up \
  --stack $PULUMI_STACK --yes
"""

[tasks."infrastructure:core:down"]
description = "launch infrastructure"
run = """
cd $root/infrastructure
docker run --rm -it \
  --platform $PLATFORM \
  --env PULUMI_ACCESS_TOKEN \
  pocketsizefund/infrastructure pulumi down \
  --stack $PULUMI_STACK --yes
"""


[tasks."infrastructure:up"]
description = "launch infrastructure"
depends = [
  "infrastructure:core:launch",
  "k8s:config:sync",
  "k8s:secrets:sync",
]
